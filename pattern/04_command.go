package pattern

import "fmt"

/*
	Паттерн команда позволяет преобразовать запрос на выполнение действия в отдельный объект-команду.

	Применяется: когда необходимо параметризовать объекты выполняемым действием; когда есть необходимость ставить
	запросы в очередь или отменять их.

	Плюсы: убирает прямую зависимость между объектами, вызывающими операции, и объектами, которые их непосредственно
	выполняют; повзоляет отменять или повторять операции; позволяет выполнять отложенный запуск операций; реализует
	первый принцип SOLID (открытости/закрытости).

	Минусы: появляются новые классы, поэтому код усложняется.

	Реальный пример использования: представим, что мы выполняем проектирование пользовательского интерфейса.
	Пункт меню не должен знать, что происходит при его активизации пользователем, он должен знать лишь о некотором действии,
	которое нужно выполнить при нажатии кнопки. Благодаря паттерну команда появляется возможность спрятать действие в объекте
	и отвязать источник этого действия от места его исполнения.
*/

type Command interface {
	Execute()
}

type WakeUpCommand struct {
	Cat *Cat1
}

func (c *WakeUpCommand) Execute() {
	c.Cat.WakeUp()
}

type SleepCommand struct {
	Cat *Cat1
}

func (c *SleepCommand) Execute() {
	c.Cat.Sleep()
}

type Cat1 struct {
}

func (c *Cat1) WakeUp() {
	fmt.Println("Cat waked up")
}

func (c *Cat1) Sleep() {
	fmt.Println("Cat fell asleep")
}

type CatControl struct {
	Command Command
}

func (c *CatControl) SetCommand(com Command) {
	c.Command = com
}

func (c *CatControl) ExecuteCommand() {
	c.Command.Execute()
}
