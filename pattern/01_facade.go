package pattern

import (
	"fmt"
)

/*
	Паттерн фасад используется для предоставлени простого интерфейса к сложной подсистеме.

	Применяется: когда необходимо предоставить простой интерфейс к некоторой функциональности подсистемы.

	Плюсы: предоставляет простой интерфейс к сложной подсистеме, тем самым изолируя клиента
	от сложной логики этой подсистемы.

	Минусы: фасад может стать божественным объектом (антипаттерн, суть которого заключается в наличии
	объекта, который реализует большу́ю часть функциональности программы).

	Реальный пример использования: представим, что мы используем сложную библиотеку или фреймворк. Необходимо
	самостоятельно инициализировать объекты и следить за их зависимостями. Это приводит к тому, что пользовательские
	классы переплетаются с классами библиотеки, что может привести к проблемам при чтении кода и его дальнейшей поддержки.
	Поэтому рациональным будет использование фасада, чтобы изолировать набор необходимых операций из сложной подсистемы
	в одном объекте.
*/

type Facade struct {
	Walls *Walls
	Roof  *Roof
	Floor *Floor
}

func NewFacade() *Facade {
	return &Facade{Walls: &Walls{}, Roof: &Roof{}, Floor: &Floor{}}
}

func (f *Facade) FacadePrint() {
	f.Walls.Print()
	f.Roof.Print()
	f.Floor.Print()
}

type Walls struct {
}

func (w *Walls) Print() {
	fmt.Println("We are walls!")
}

type Roof struct {
}

func (r *Roof) Print() {
	fmt.Println("I am a roof!")
}

type Floor struct {
}

func (f *Floor) Print() {
	fmt.Println("I am a floor!")
}
